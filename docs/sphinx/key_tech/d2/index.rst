

D2: Dynamic Thread Optimize
===========================

D2: Dynamic Thread Optimize(動的スレッド最適化)はSusanow計画でもっとも
重要な技術である. VNFのスレッド最適化を動的に多重化/逆多重化させることで
計算機資源を柔軟に使うことを可能にする. このパートではD2について例を用いて
説明をしていく.

.. note::
  名前の由来はDynamic Thread Optimize: DTO: (TO->2): D2である.

ここではもっともシンプルなNFであるLyer2 Forwarder(l2fwd)を例に考えていく.
l2fwdはポートを2つ持っており, 一方からうけとったパケットを他方のポートから
送信するだけの非常にシンプルなNFである. 以下にコアを1つ割り当てたl2fwdの
単純なスレッドパターンを示す.

.. figure:: img/l2fwd_1para.png
  :align: center

  l2fwd Thread Pattern

この図では任意のNFをスレッドパターンのNICのハードウェアバッファで表すことが
できる図の部品を用いている. DPDKで実装されたNFはよくこの形式でスレッドパターン
を示されることが多い.

D2では特定の箇所の負荷が上がったこと検知し, 処理率が低下しているスレッドを
判定し, それの多重化を増やす. といった手順を自動で行う.
以下がそれを簡単に説明している図である.

.. figure:: img/d2_flow.png
  :align: center

  D2 Optimize Flow

D2は以下の処理を手順として実装したとてもシンプルなものである.

- タイマーなどの何らかのアクションでD2engineが起動
- 処理率が低下しているスレッドを探索し発見
- そのスレッドを多重化することで処理率が回復を試みる
- 処理率が100％に十分に高く, リソースにあまりがあるスレッドを探索し発見
- そのスレッドを逆多重化することで, 計算機リソースを減らす

D2の実装はこのオペレーションをVNFのプログラムとは分離して実装を行うものである.
D2engineを利用するVNFは決められたAPIにしたがってVNFを設計実装することでD2を
使用可能である. VNFをD2を利用して性能向上させる場合, VNFプログラマはそのような
処理を記述する必要がなく, コードを書き換える必要もない.
ただD2に提供されるAPIを使用するだけで利用できる.

現在はVNFのPipelineは一段のみで実装をしているが, 今後は多段Pipelineに対応を
する予定である. 多重化するグループ(D2ではこれをBlockと呼ぶ)を多段にチェイン
させるだけでこれは実装可能である.

.. note::
  対応予定であるが時間が足りないので多段Pipeline対応を行う作業は
  未踏期間中に取り組まない予定である.
  DPDK VNFはrun to completionモデルとpipelineモデルという二つの
  スレッドモデルがあるが,pip2lineモデルの対応を行わないという意味である.
  必要性を感じた場合は予定を変更してでも対応は可能であるので,
  ぜひご意見をいただきたい...


設計と実装
----------

.. todo::
  BlockとPieceについての説明をする.

D2の設計と実装を説明することは, NICのMultiqueueに対するアクセス数を動的に
変化する時, 複数のスレッドからのそのアクセスはどのように変化するのかを
説明することになる.
別の言葉で説明すると, 複数のスレッドからNICに対する同時アクセスを
D2がどのように隠蔽するか, ということである.

ここではRx/Txでは同じような隠蔽方法をとっているので, Rxにのみフォーカスして
説明をしていく. 以下に各スレッドがどのようにMultiqueueにアクセスを行うかを示す.

.. figure:: img/d2_accessor.png
  :align: center

  D2 Port Access Flow

スレッドは指定したAccessorにアクセスする. Accessorは監視対象のQueueを
ラウンドロビンで監視し, 順番にアクセスを行う.
Accessorの数が増えたタイミングで各Accessorの監視対象のリストを更新することで
アクセスするスレッドを動的に増減できるようにしている.
このようにAccessorがNICのMultiqueueを隠蔽することでよりシンプルな
設計実装を可能にしている.

Limitation
----------

- 現状ではNUMA AwareはBlockレベルでしか行えなく,
  ブロックの配置はユーザが行う必要がある.
  今後NUMAを完全Awareすることを予定している. (開発中)

.. todo::
  具体的なユースケースを用いてD2が有効であることを示す.
  コアネットワークにデプロイしている状態で思いトラフィックを処理できる場面と
  NFVサービスチェイン環境で軽量なVNFを多数デプロイし, 基盤リソースを効率よく
  共有する場面を例としながら説明する.



