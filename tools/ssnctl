#!/usr/bin/env python3
#
# MIT License
# Copyright (c) 2017 Susanow
# Copyright (c) 2017 Hiroki SHIROKURA
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# Available Commands
# - [x] show
# - [x] show ports
# - [x] show vnfs
# - [ ] vnf
# - [x] vnf <name> stat
# - [ ] vnf <name> deploy
# - [ ] vnf <name> coremask reset
# - [ ] vnf <name> coremask set <coremask> <blockid>
# - [x] vnf <name> undeploy
# - [x] port
# - [x] port <name> stat

import json
import time
import sys
import pprint
import requests
URL = "http://localhost:8888";

def get_json_dict_from_url(path):
    try:
        response = requests.get(path)
        r = response.text
        json_dict = json.loads(r)
        return json_dict
    except Exception as ex:
        print("error {}".format(str(ex)))
        exit(-1)

def delete_json_dict_from_url(path):
    try:
        response = requests.delete(path)
        r = response.text
        json_dict = json.loads(r)
        return json_dict
    except Exception as ex:
        print("error {}".format(str(ex)))
        exit(-1)

def put_json_dict_to_url(path, data):
    try:
        response = requests.put(path, data)
        r = response.text
        json_dict = json.loads(r)
        return json_dict
    except Exception as ex:
        print("error {}".format(str(ex)))
        exit(-1)

def usage():
    print("Usage: ssnctl [OPTIONS]")
    print("")
    print(" OPTIONS")
    print("   show")
    print("   vnf")
    print("   port")

def usage_show():
    print("Usage: ssnctl show [OPTIONS]")
    print("")
    print(" OPTIONS")
    print("   vnfs ")
    print("   ports ")

def usage_vnf():
    print("Usage: ssnctl vnf <vnfname> [OPTIONS]")
    print("")
    print(" OPTIONS")
    print("   stat ")
    print("   deploy ")
    print("   undeploy ")
    print("   coremask reset ")
    print("   coremask set <coremask> <blockid> ")

def usage_port():
    print("Usage: ssnctl port <portname> [OPTIONS]")
    print("")
    print(" OPTIONS")
    print("   stat ")

def vnf_NAME_stat(vnfname):
    path = URL + "/vnfs/" + vnfname + "/running"
    json_dict = get_json_dict_from_url(path)
    if (json_dict["result"]["success"]):
        name     = json_dict["vnf"]["name"]
        n_port   = json_dict["vnf"]["n_port"]
        n_block  = json_dict["vnf"]["n_block"]
        running  = json_dict["vnf"]["running"]

        print("name    : {}".format(name))
        print("running : {}".format(running))
        print("n_port  : {}".format(n_port))
        for i  in range(n_port):
            p_idx = "port" + str(i);
            portname = json_dict["vnf"]["ports"][p_idx]["name"]
            print(" port[{}]: {}".format(i, portname))

        print("n_block : {}".format(n_block))
        for i  in range(n_block):
            b_idx = "block" + str(i);
            block = json_dict["vnf"]["blocks"][b_idx]
            blockname = block["name"]
            runnning  = block["running"]
            cmask     = block["cmask"]
            print(" block[{}]: {}".format(i, blockname))
            print("   running: {}".format(running))
            print("   cmask  : {}".format(cmask))

        return
    else:
        print("vnf \'{}\' not found".format(vnfname))

def vnf_NAME_coremask_set_COREMASK_BID(vnfname, coremask, blockid):
    path = URL + "/vnfs/" + vnfname + "/coremask"
    data = "{\"coremask\": " + str(coremask) + ","
    data +=  "\"blockid\": " + str(blockid) + "}"
    print(data)
    json_dict = put_json_dict_to_url(path, data)
    if (json_dict["result"]["success"]): print("success")
    else: print("unsuccess")

def vnf_NAME_coremask_reset(vnfname):
    path = URL + "/vnfs/" + vnfname + "/coremask"
    json_dict = delete_json_dict_from_url(path)
    if (json_dict["result"]["success"]): print("success")
    else: print("unsuccess")

def vnf_NAME_deploy(vnfname):
    path = URL + "/vnfs/" + vnfname + "/running"
    data = "";
    json_dict = put_json_dict_to_url(path, data)

    if (json_dict["result"]["success"]):
        running  = json_dict["vnf"]["running"]
        if (running): print("deploy success")
        else:         print("deploy unsuccess")
        return
    else:
        print("vnf \'{}\' not found".format(vnfname))

def vnf_NAME_undeploy(vnfname):
    path = URL + "/vnfs/" + vnfname + "/running"
    json_dict = delete_json_dict_from_url(path)

    if (json_dict["result"]["success"]):
        running  = json_dict["vnf"]["running"]
        if (running): print("still running")
        else:         print("undeploy success")
        return
    else:
        print("vnf \'{}\' not found".format(vnfname))

def port_NAME_stat(portname):
    path = URL + "/ports/" + portname + "/config"
    json_dict = get_json_dict_from_url(path)
    if (json_dict["result"]["success"]):
        name     = json_dict["port"]["name"]
        n_rxq    = json_dict["port"]["n_rxq"]
        n_txq    = json_dict["port"]["n_txq"]
        n_rxa    = json_dict["port"]["n_rxa"]
        n_txa    = json_dict["port"]["n_txa"]
        pr       = json_dict["port"]["perfred"]
        print("name          : {}".format(name))
        print("n_rxq         : {}".format(n_rxq))
        print("n_txq         : {}".format(n_txq))
        print("n_rxq         : {}".format(n_rxa))
        print("n_txq         : {}".format(n_txa))
        print("perf-reduction: {}".format(pr   ))
        return
    else:
        print("port \'{}\' not found".format(portname))

def show_vnfs():
    path = URL + "/vnfs"
    json_dict = get_json_dict_from_url(path)
    n_vnf = json_dict["n_vnf"]
    for i in range(n_vnf):
        idx   = "{}".format(i)
        name    = json_dict[idx]["name"]
        n_port  = json_dict[idx]["n_port"]
        n_block = json_dict[idx]["n_block"]
        running = json_dict[idx]["running"]

        print("{}".format(name))
        print(" n_port  : {}".format(n_port))
        print(" n_block : {}".format(n_block))
        print(" running : {}".format(running))
    exit(0)

def show_ports():
    path = URL + "/ports"
    json_dict = get_json_dict_from_url(path)
    n_port = json_dict["n_port"]
    for i in range(n_port):
        idx = str(i)
        name  = json_dict[idx]["name"]
        n_rxq = json_dict[idx]["n_rxq"]
        n_txq = json_dict[idx]["n_txq"]
        n_rxa = json_dict[idx]["n_rxa"]
        n_txa = json_dict[idx]["n_txa"]
        pr    = json_dict[idx]["perfred"]
        print("{}".format(name))
        print(" n_rxq   : {}".format(n_rxq))
        print(" n_txq   : {}".format(n_txq))
        print(" n_rxacc : {}".format(n_rxa))
        print(" n_txacc : {}".format(n_txa))
        print(" pref-red: {}".format(pr))

def show(argc, argv):
    if (argc < 2):
        usage_show()
        exit(-1)

    if (argv[1] == "vnfs"): show_vnfs()
    elif (argv[1] == "ports"): show_ports()
    else:
        print("show: unknown option")
        usage_show()
        exit(-1)

def vnf(argc, argv):
    if (argc < 3):
        usage_vnf()
        exit(-1)

    vnfname  = argv[1]
    option   = argv[2]

    if (option == "stat"):
        vnf_NAME_stat(vnfname)
        exit(0)
    elif (option == "undeploy"):
        vnf_NAME_undeploy(vnfname)
        exit(0)
    elif (option == "deploy"):
        vnf_NAME_deploy(vnfname)
        exit(0)
    elif (option == "coremask"):
        if (argc >= 4):
            subop = argv[3]
            if (subop == "reset"):
                vnf_NAME_coremask_reset(vnfname)
                exit(0)
            elif (subop == "set"):
                if (argc >= 6):
                    coremask = [4]
                    blockid  = [5]
                    vnf_NAME_coremask_set_COREMASK_BID(coremask,blockid)

    usage_vnf()
    exit(-1)

def port(argc, argv):
    if (argc < 3):
        usage_port()
        exit(-1)

    portname = argv[1]
    option   = argv[2]
    if (option == "stat"):
        port_NAME_stat(portname)
        exit(0)

    usage_port()
    exit(-1)

def main():
    argc = len(sys.argv)
    argv = sys.argv
    if (argc < 2):
        usage()
        exit(-1)

    option = argv[1]
    if (option == "show"):
        show(argc-1, argv[1:])
        exit(0)
    elif (option == "vnf"):
        vnf(argc-1, argv[1:])
        exit(0)
    elif (option == "port"):
        port(argc-1, argv[1:])
        exit(0)
    else:
        print("ssnctl: option not found")
        usage()
        exit(-1)

if __name__ == '__main__':
    main()

