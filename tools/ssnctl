#!/usr/bin/env python3
#
# MIT License
# Copyright (c) 2017 Susanow
# Copyright (c) 2017 Hiroki SHIROKURA
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


import json
import time
import sys
import pprint
import requests
URL = "http://localhost:8888";

def get_json_dict_from_uri(uri):
    path = URL + uri;
    try:
        response = requests.get(path)
        r = response.text
        json_dict = json.loads(r)
        return json_dict
    except Exception as ex:
        print("error: {}".format(str(ex)))
        print("content: {}".format(response.content))
        exit(-1)

def delete_json_dict_from_uri(uri):
    path = URL + uri;
    try:
        response = requests.delete(path)
        r = response.text
        json_dict = json.loads(r)
        return json_dict
    except Exception as ex:
        print("error: {}".format(str(ex)))
        print("content: {}".format(response.content))
        exit(-1)

def put_json_dict_to_uri(uri, data):
    path = URL + uri;
    try:
        response = requests.put(path, data)
        r = response.text
        json_dict = json.loads(r)
        return json_dict
    except Exception as ex:
        print("error: {}".format(str(ex)))
        print("content: {}".format(response.content))
        exit(-1)

def post_json_dict_to_uri(uri, data):
    path = URL + uri;
    try:
        response = requests.post(path, data)
        r = response.text
        json_dict = json.loads(r)
        return json_dict
    except Exception as ex:
        print("error: {}".format(str(ex)))
        print("content: {}".format(response.content))
        exit(-1)

def dprint(depth, string):
    print('  '*depth + string)

def print_port(port, depth=0):
    if (type(port) == str):
        print("OKASHIIIIII")
        exit(-1)
    dprint(depth, "name    : {}".format(port["name"   ] ))
    dprint(depth, "attach  : {}".format(port["attach" ] ))
    dprint(depth, "n_rxq   : {}".format(port["n_rxq"  ] ))
    dprint(depth, "n_txq   : {}".format(port["n_txq"  ] ))
    dprint(depth, "n_rxa   : {}".format(port["n_rxa"  ] ))
    dprint(depth, "n_txa   : {}".format(port["n_txa"  ] ))
    dprint(depth, "perfred : {}".format(port["perfred"] ))

def print_block(block, depth=0):
    dprint(depth, "name    : {}".format( block["name"   ] ))
    dprint(depth, "running : {}".format( block["running"] ))
    dprint(depth, "coremask: {}".format( block["coremask"] ))

def print_vnf(vnf, depth=0):
    dprint(depth, "name       : {}".format( vnf["name"   ] ))
    dprint(depth, "running    : {}".format( vnf["running"] ))
    dprint(depth, "coremask   : {}".format( vnf["coremask"] ))
    dprint(depth, "n_port     : {}".format( vnf["n_port" ] ))
    dprint(depth, "n_block    : {}".format( vnf["n_block"] ))
    n_port = vnf["n_port"]
    for i in range(n_port):
        port = vnf["ports"][str(i)]
        if (type(port) == str):
            dprint(depth, "port[{}]: nil".format(i))
        else:
            dprint(depth, "port[{}]:".format(i))
            print_port(port, depth+1)
    n_block = vnf["n_block"]
    for i  in range(n_block):
        dprint(depth, "block[{}]".format(i))
        block = vnf["blocks"][str(i)]
        print_block(block, depth+1)

def usage():
    print("Usage: ssnctl [OPTIONS]\n")
    print("OPTIONS")
    print("  show      show susanow informations")
    print("  vnf       operate vnfs             ")
    print("  port      operate ports            ")

def usage_show():
    print("Usage: ssnctl show [OPTIONS]\n")
    print("OPTIONS")
    print("  vnfs      vnf status   ")
    print("  ports     port status  ")
    print("  system    system status")
    print("  pcat      port catalog status")
    print("  vcat      vnf catalog status ")

def usage_vnf():
    print("Usage: ssnctl vnf <vnfname> [OPTIONS]\n")
    print("OPTIONS")
    print("  stat                           get vnf status            ")
    print("  alloc <cname>                  allocate new vnf          ")
    print("  delete                         delete vnf                ")
    print("  attachport <pid> <pname>       attach port to vnf        ")
    print("  detachport <pid>               detach port from vnf      ")
    print("  deploy                         deploy vnf                ")
    print("  undeploy                       undeploy vnf              ")
    print("  reset                          reset vnf's accessor infos")
    print("  setcoremask  <bid> <coremask>  set block's coremask      ")

def usage_port():
    print("Usage: ssnctl port <portname> [OPTIONS]\n")
    print("OPTIONS")
    print("  stat                      get port status       ")
    print("  alloc pci <01:00.0>       allocate new pci port ")
    print("  alloc tap <tap0>          allocate new tap port ")
    print("  alloc virt                allocate new virt port")
    print("  delete                    delete port           ")

def show_system():
    uri = "/"
    json_dict = get_json_dict_from_uri(uri)

    n_vnf  = json_dict["n_vnf"]
    n_port = json_dict["n_port"]
    n_vcat = json_dict["n_vcat"]
    n_pcat = json_dict["n_pcat"]
    print("n_vnf : {}".format(n_vnf ))
    print("n_port: {}".format(n_port))
    print("n_vcat: {}".format(n_vcat))
    print("n_pcat: {}".format(n_pcat))

def show_vnfs():
    uri = "/vnfs"
    json_dict = get_json_dict_from_uri(uri)
    n_vnf = json_dict["n_vnf"]
    for i in range(n_vnf):
        vnf = json_dict[str(i)]
        print("[{}]".format(i))
        print_vnf(vnf, 1)

def show_ports():
    uri = "/ports"
    json_dict = get_json_dict_from_uri(uri)
    n_port = json_dict["n_port"]
    for i in range(n_port):
        print("[{}]".format(i))
        port = json_dict[str(i)]
        if (type(port) == dict): print_port(port, 1)

def show_vcat():
    uri = "/catalogs/vnf"
    json_dict = get_json_dict_from_uri(uri)
    n_port = json_dict["n_ele"]
    for i in range(n_port):
        idx = str(i)
        name      = json_dict[idx]["name"]
        allocator = json_dict[idx]["allocator"]
        print("{}".format(name))
        print(" name      : {}".format(name))
        print(" allocator : {}".format(allocator))

def show_pcat():
    uri = "/catalogs/port"
    json_dict = get_json_dict_from_uri(uri)
    n_port = json_dict["n_ele"]
    for i in range(n_port):
        idx = str(i)
        name      = json_dict[idx]["name"]
        allocator = json_dict[idx]["allocator"]
        print("{}".format(name))
        print(" name      : {}".format(name))
        print(" allocator : {}".format(allocator))

def show(argc, argv):
    if (argc < 2):
        usage_show()
        exit(-1)
    option = argv[1]
    if   (option == "vnfs"  ): show_vnfs()
    elif (option == "ports" ): show_ports()
    elif (option == "system"): show_system()
    elif (option == "vcat"  ): show_vcat()
    elif (option == "pcat"  ): show_pcat()
    else:
        print("show: unknown option\n")
        usage_show()
        exit(-1)

def vnf_NAME_stat(vnfname):
    uri = "/vnfs/" + vnfname
    json_dict = get_json_dict_from_uri(uri)
    if (json_dict["result"]["success"]):
        vnf = json_dict["vnf"]
        print_vnf(vnf)
        return
    else: print("miss: {}".format(json_dict["result"]["msg"]))

def vnf_NAME_deploy(vnfname):
    uri = "/vnfs/" + vnfname + "/deploy"
    result = put_json_dict_to_uri(uri, "")["result"]
    if (result["success"]): return
    else: print("miss: {}".format(result["msg"]))

def vnf_NAME_undeploy(vnfname):
    uri = "/vnfs/" + vnfname + "/undeploy"
    result = put_json_dict_to_uri(uri, "")["result"]
    if (result["success"]): return
    else: print("miss: {}".format(result["msg"]))

def vnf_NAME_alloc_CNAME(vnfname, cname):
    uri = "/vnfs/" + vnfname
    data = "{\"cname\": \"" + cname + "\" }"
    result = post_json_dict_to_uri(uri, data)["result"]
    if (result["success"]): return
    else: print("miss: {}".format(result["msg"]))

def vnf_NAME_delete(vnfname):
    uri = "/vnfs/" + vnfname
    result = delete_json_dict_from_uri(uri)["result"]
    if (result["success"]): return
    else: print("miss: {}".format(result["msg"]))

def vnf_NAME_attachport_PID_PNAME(vnfname, pid, pname):
    uri = "/vnfs/" + vnfname + "/ports/" + str(pid)
    data = "{\"pname\": \"" + str(pname) + "\" }"
    result = put_json_dict_to_uri(uri, data)["result"]
    if (result["success"]): return
    else: print("miss: {}".format(result["msg"]))

def vnf_NAME_detachport_PID(vnfname, pid):
    uri = "/vnfs/" + vnfname + "/ports/" + str(pid)
    result = delete_json_dict_from_uri(uri)["result"]
    if (result["success"]): return
    else: print("miss: {}".format(result["msg"]))

def vnf_NAME_reset(vnfname):
    uri = "/vnfs/" + vnfname + "/reset"
    result = put_json_dict_to_uri(uri, "")["result"]
    if (result["success"]): return
    else: print("miss: {}".format(result["msg"]))

def vnf_NAME_setcoremask_BID_COREMASK(vnfname, bid, coremask):
    uri = "/vnfs/" + vnfname + "/coremask/" + str(bid)
    data = "{\"coremask\": " + str(coremask) + "}"
    result = put_json_dict_to_uri(uri, data)["result"]
    if (result["success"]): return
    else: print("miss: {}".format(result["msg"]))

def vnf(argc, argv):
    if (argc < 3):
        usage_vnf()
        exit(-1)
    vnfname  = argv[1]
    option   = argv[2]
    if   (option == "stat"      ):
        vnf_NAME_stat(vnfname)
        return
    elif (option == "alloc"     ):
        if (argc >= 4):
            cname = argv[3]
            vnf_NAME_alloc_CNAME(vnfname, cname)
            return
    elif (option == "delete"    ):
        vnf_NAME_delete(vnfname)
        return
    elif (option == "attachport"):
        if (argc >= 5):
            pid   = argv[3]
            pname = argv[4]
            vnf_NAME_attachport_PID_PNAME(vnfname, pid, pname)
            return
    elif (option == "detachport"):
        if (argc >= 4):
            pid   = argv[3]
            vnf_NAME_detachport_PID(vnfname, pid)
            return
    elif (option == "reset"     ):
        vnf_NAME_reset(vnfname)
        return
    elif (option == "setcoremask"):
        if (argc >= 5):
            bid   = argv[3]
            coremask = argv[4]
            vnf_NAME_setcoremask_BID_COREMASK(vnfname, bid, coremask)
            return
    elif (option == "deploy"    ):
        vnf_NAME_deploy(vnfname)
        return
    elif (option == "undeploy"  ):
        vnf_NAME_undeploy(vnfname)
        return
    usage_vnf()
    exit(-1)

def port_NAME_stat(pname):
    uri = "/ports/" + pname
    json_dict = get_json_dict_from_uri(uri)
    if (json_dict["result"]["success"]):
        port = json_dict["port"]
        print_port(port)
        return
    else: print("miss: {}".format(json_dict["result"]["msg"]))

def port_NAME_delete(pname):
    uri = "/ports/" + pname
    result = delete_json_dict_from_uri(uri)["result"]
    if (result["success"]): return
    else: print("miss: {}".format(result["msg"]))

def port_NAME_alloc_pci(pname, pciaddr):
    cname = "pci"
    uri = "/ports/" + pname
    data = ""
    data += "{ \n"
    data += "    \"cname\"  : \"" + cname + "\", \n"
    data += "    \"options\": { \n"
    data += "          \"pciaddr\"  : \"" + pciaddr + "\" \n"
    data += "    } \n"
    data += "} \n"
    result = post_json_dict_to_uri(uri, data)["result"]
    if (result["success"]): return
    else: print("miss: {}".format(result["msg"]))

def port_NAME_alloc_tap(pname, ifname):
    cname = "tap"
    uri = "/ports/" + pname
    data = ""
    data += "{ \n"
    data += "    \"cname\"  : \"" + cname + "\", \n"
    data += "    \"options\": { \n"
    data += "          \"ifname\"  : \"" + ifname + "\" \n"
    data += "    } \n"
    data += "} \n"
    result = post_json_dict_to_uri(uri, data)["result"]
    if (result["success"]): return
    else: print("miss: {}".format(result["msg"]))

def port_NAME_alloc_virt(pname):
    cname = "virt"
    uri = "/ports/" + pname
    data = ""
    data += "{ \n"
    data += "    \"cname\"  : \"" + cname + "\", \n"
    data += "    \"options\": { \n"
    data += "    } \n"
    data += "} \n"
    result = post_json_dict_to_uri(uri, data)["result"]
    if (result["success"]): return
    else: print("miss: {}".format(result["msg"]))

def port(argc, argv):
    if (argc < 3):
        usage_port()
        exit(-1)
    pname = argv[1]
    option   = argv[2]
    if   (option == "stat"  ):
        port_NAME_stat(pname)
        return
    elif (option == "delete"):
        port_NAME_delete(pname)
        return
    elif (option == "alloc" ):
        if (argc >= 4):
            subop = argv[3]
            if   (subop == "pci"):
                if (argc >= 5):
                    pciaddr = argv[4]
                    port_NAME_alloc_pci(pname, pciaddr)
                    return
            elif (subop == "tap"):
                if (argc >= 5):
                    ifname = argv[4]
                    port_NAME_alloc_tap(pname, ifname)
                    return
            elif (subop == "virt"):
                port_NAME_alloc_virt(pname)
                return
    usage_port()
    exit(-1)

def main():
    argc = len(sys.argv)
    argv = sys.argv
    if (argc < 2):
        usage()
        exit(-1)

    option = argv[1]
    if (option == "show"):
        show(argc-1, argv[1:])
        exit(0)
    elif (option == "vnf"):
        vnf(argc-1, argv[1:])
        exit(0)
    elif (option == "port"):
        port(argc-1, argv[1:])
        exit(0)
    else:
        print("ssnctl: option not found")
        usage()
        exit(-1)

if __name__ == '__main__':
    main()

